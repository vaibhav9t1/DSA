
// As we know that, Postorder - Left Right Root
// Means Root node will there from right side of the vector, so will traverse the postorder vector from the end

 TreeNode* BuildTree(vector<int>postorder, vector<int>inorder,int &index, int start, int end,unordered_map<int,int>&mp){

        // starting from the end, if index will be less than zero then return null
        if(index <0 || start>end) return NULL;

        // finding the index of root element of postorder in Inorder vector
        int position = mp[postorder[index]];
        TreeNode* node = new TreeNode(postorder[index--]);

        // Here we are starting from the right side first because, Postorder is Left->Right->Root type of thing
        node->right = BuildTree(postorder,inorder,index,position+1,end,mp);
        node->left = BuildTree(postorder,inorder,index, start,position-1,mp);

        return node;
    }

    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        unordered_map<int,int> mp;
        for(int i=0;i<inorder.size();i++){
            mp[inorder[i]]=i;
        }        
        int index = inorder.size()-1;
        return BuildTree(postorder,inorder,index,0,inorder.size()-1,mp);
    }
