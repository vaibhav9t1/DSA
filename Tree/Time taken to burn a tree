
    int BurningTime(TreeNode* root, TreeNode* target, map<TreeNode*,TreeNode*> mpp){

        queue<TreeNode*> q;
        q.push(target);
        map<TreeNode*,int> vis;
        vis[target] = 1;
        int maxi = 0;

        while(!q.empty()){

            int sz =q.size();
            int fl = 0;


            for(int i=0;i<sz;i++){
                TreeNode* temp = q.front();
                q.pop();

                if(temp->left != NULL && vis[temp->left]==0){
                    fl = 1;
                    q.push(temp->left);
                    vis[temp->left] = 1;
                }

                if(temp->right !=NULL && vis[temp->right]==0){
                    fl = 1;
                    q.push(temp->right);
                    vis[temp->right] = 1;
                }

                if(mpp[temp] && vis[mpp[temp]]==0){
                    fl = 1;
                    q.push(mpp[temp]);
                    vis[mpp[temp]] = 1;
                }

            }

            if(fl) maxi++;
        }

        return maxi;


    }

  // Map all the parent node to each node using Level Order Traverals
    TreeNode* MapParents(TreeNode* root, int start, map<TreeNode*,TreeNode*>&mpp){

        queue<TreeNode*>q;
        q.push(root);
        TreeNode* tar = NULL;

        while(!q.empty()){

            TreeNode* node = q.front();
            if(node->val == start) tar = node;
            q.pop();

            if(node->left){
                mpp[node->left] = node;
                q.push(node->left);
            }

            if(node->right){
                mpp[node->right] = node;
                q.push(node->right);
            }
        }

        return tar;

    }

    int amountOfTime(TreeNode* root, int start) {
        
        map<TreeNode*,TreeNode*> mpp;
        TreeNode* target = MapParents(root,start,mpp);

        return BurningTime(root,target,mpp);
    }
