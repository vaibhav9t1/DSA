  TreeNode* BuildTree(vector<int>preorder, vector<int>inorder,int &index, int start, int end,unordered_map<int,int>&mp){

        // This index will start from the first element of preorder as first element of preorder is root element

        if(index >= inorder.size() || start>end) return NULL;


        // We are find the index of that particular first element of preorder in inorder vector
        int position = mp[preorder[index]];

        // Creating a Node and putting value of root in it
        TreeNode* node = new TreeNode(preorder[index++]);

        // After locating the index of element in inorder then left side element of inorder will be left nodes of root element
        node->left = BuildTree(preorder,inorder,index, start,position-1,mp);

        // Right side elements will be right side nodes of root element
        node->right = BuildTree(preorder,inorder,index,position+1,end,mp);

        return node;
    }

    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        unordered_map<int,int> mp;

        // Storing the index of inorder array elements to locate the position of element present in inorder vector;
        for(int i=0;i<inorder.size();i++){
            mp[inorder[i]]=i;
        }        
        int index = 0;

        // This will return the ans or root node address
        return BuildTree(preorder,inorder,index,0,inorder.size()-1,mp);
    }
