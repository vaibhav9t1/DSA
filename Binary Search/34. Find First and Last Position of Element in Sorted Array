class Solution {
public:
    vector<int> searchRange(vector<int>& arr, int target) {
      
        int l =0, r=arr.size()-1;
        int s1 = -1, s2 = -1;

        while(l<=r)
        {
            int mid = l + (r-l)/2;

            if(arr[mid] == target)
            {
                s1 = mid;
                r = mid - 1;
                continue;
            }

            if(arr[mid] < target){
                l = mid + 1;
            }
            else r = mid - 1;

        }
        l=0, r= arr.size()-1;

         while(l<=r)
        {
            int mid = l + (r-l)/2;

            if(arr[mid] == target)
            {
                s2 = mid;
                l = mid + 1;
                continue;
            }

            if(arr[mid] < target){
                l = mid + 1;
            }
            else r = mid - 1;

        }

        return {s1,s2};
        

    }
};

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
       
       int l = lower_bound(nums.begin(),nums.end(), target) - nums.begin();
       int r = upper_bound(nums.begin(),nums.end(),target) - nums.begin() - l;

        if(l == nums.size() || nums[l]!=target) return {-1,-1};

        return {l,l+r-1};

    }
};
