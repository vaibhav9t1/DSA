class Solution {
public:

    int FirstOccur(vector<int>&nums, int target){

        int l = 0, r=nums.size()-1;
        int ans = -1;

        while(l<=r){
            int mid = l + (r-l)/2;

            // In these case, we have to find least index of target so move towards left part as possible
            if(nums[mid] == target){
                ans = mid;
                r = mid - 1;
            }
            else if(nums[mid] > target){
                r = mid - 1;
            }
            else{
                l = mid + 1;
            }
        }

        return ans;

    }

     int LastOccur(vector<int>&nums, int target){

        int l = 0, r=nums.size()-1;
        int ans = -1;

        while(l<=r){
            int mid = l + (r-l)/2;

            // In these case, we have to find greater index of target so move towards right part as possible
            if(nums[mid] == target){
                ans = mid;
                l = mid + 1;
            }
            else if(nums[mid] > target){
                r = mid - 1;
            }
            else{
                l = mid + 1;
            }
        }

        return ans;

    }

    vector<int> searchRange(vector<int>& nums, int target) {
        
        return {FirstOccur(nums,target), LastOccur(nums,target)};

    }
};
