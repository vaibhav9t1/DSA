/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:

    ListNode* Merge(ListNode* left, ListNode* right){

        if(left==NULL) return  right;
        if(right==NULL) return left;

        ListNode* temp = new ListNode(0);
        ListNode* Ret = temp;
        

        while(left!=NULL && right!=NULL){
            if(left->val <= right->val){
                temp->next = left;
                left = left->next;
            }
            else{
                temp->next = right;
                right = right->next;
            }
            temp = temp->next;
        }

        if(right!=NULL){
            temp->next = right;
            temp = right;
            right = right->next;
        }
        if(left!=NULL){
            temp->next = left;
            temp = left;
            left = left->next;
        }

        return Ret->next;

    }

    // Find Mid function in Linked List
    ListNode* FindMid(ListNode* head){

        // if(head==NULL || head->next==NULL) return head;

        ListNode* slow = head;
        ListNode* fast = head->next;

        while(fast!=NULL && fast->next!=NULL){
            fast = fast->next->next;
            slow = slow->next;
        }

        return slow;

    }

    ListNode* sortList(ListNode* head) {
        
        if(head==NULL || head->next==NULL) return head;

        // Finding mid
        ListNode* mid = FindMid(head);
        ListNode* left = head;
        ListNode* right = mid->next;
        mid->next = NULL;

        // Left and Right part will be sorted
        left = sortList(left);
        right = sortList(right);

        // Sorted Left and Right parts will get merged
        ListNode* result = Merge(left,right);

        return result;
    }
};
