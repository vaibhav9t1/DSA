You also have two integers upperbound and lowerbound. Now you need to return how many arrays exist within the upperbound and lowerbound that analogy to your secret array.
Two arrays are analogy if their difference between consecutive numbers are the same.
For example, array [1, 0, 3, 0] and array [2, 1, 4, 1] are analogy. Because the difference are the same [-1, 3, -3].

  int solve(vector<int> A, int lowerBound, int upperBound) {
        unordered_set<int> a, b;
        
        for (int i = lowerBound; i <= upperBound; i++) a.insert(i);
        
        for (int diff: A) {
          for (int num: a) { 
            if (num + diff <= upperBound && num + diff >= lowerBound) {
              b.insert(num + diff);
            }
          }
          
          a = b;
          b.clear();
        }
        
        return a.size();
    }
    
    int solve(vector<int> A, int lowerBound, int upperBound) {
      int mi = 0, mx = 0, sum = 0;
      
      for (int num: A) {
        sum += num;
        mi = min(mi, sum);
        mx = max(mx, sum);
      }
      
      return (upperBound - lowerBound - (mx - mi) + 1);
    }
I was able to come up with the above approaches but this solution is getting wrong for these test case -
Inputs:
Arr = [1, 1, 3, 2], upperbound = 5, lowerbound = 1
Output:
2
Explanation:
[2, 2, 4, 3], [3, 3, 5, 4]




  int solve(vector<int>&nums, int lowerbound, int upperbound){
    int maxi= *max_element(nums.begin(), nums.end());
    int mini= *min_element(nums.begin(), nums.end());

    int ans=0;
    if(upperbound>maxi){
        ans+=upperbound-maxi;
    }
    if(lowerbound<mini){
        ans+=mini-lowerbound;
    }
    return ans;
}
