/************************** NUMBER OF DISTINCT ISLANDS ********************************8*/


     /*
        Notes:
            1. Mark all the 1's which are connected and it is necessary
                that we put all them into set to store only unique nodes.
            2. Question is how we distinguish nodes as different nodes, first
               we will always store the basex and basey of nodes and each time we
               meet new node containing (1's) we will minus out the basex and basey
               from their indexes to make them look similar to other nodes
            3. If base (2,2) -> Right side node (2,3)
                                store like (2-2,3-1) i.e (0,1)
            4. This way we can prevent them from inserting same shape graphss
            5. Set Data Structure will only store the unique NODE graphs, hence
                we will return the size of set ans our solution.
    */
    
/*
    void dfs(int basex, int basey,int r, int c, vector<vector<int>>&vis, vector<vector<int>>&grid,
    vector<pair<int,int>>&ds){
        
        int n = grid.size(), m = grid[0].size();
        
        vis[r][c] = 1;
        ds.push_back({r-basex, c-basey});
        
        int delrow[] = {-1,0,1,0};
        int delcol[] = {0,1,0,-1};
        
        for(int i=0;i<4;i++){
            
            int row = r + delrow[i];
            int col = c + delcol[i];
            
            if(row>=0 && row<n && col>=0 && col<m && vis[row][col]==0
            && grid[row][col] == 1){
                dfs(basex,basey,row,col,vis,grid,ds);
            }
            
        }
        
    }
    
    
    int countDistinctIslands(vector<vector<int>>& grid) {
            int n = grid.size(), m = grid[0].size();
            
            
            set<vector<pair<int,int>>> ans;
            vector<vector<int>> vis(n,vector<int> (m,0));
            
            for(int i=0;i<n;i++){
                for(int j=0;j<m;j++){
                    if(vis[i][j] == 0 && grid[i][j]==1){
                        vector<pair<int,int>> ds;
                        dfs(i,j,i,j,vis,grid,ds);
                        ans.insert(ds);
                    }
                }
            }
            
            return ans.size();
    }
*/
