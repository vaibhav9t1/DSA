// Function to find the number of islands.
    
    void bfs(int row, int col, vector<vector<int>>&vis, vector<vector<char>> &grid){
        
        int n = grid.size(), m = grid[0].size();

        vis[row][col] = 1;
        queue<pair<int,int>> q;
        q.push({row,col});

        while(!q.empty()){
            int i = q.front().first;
            int j = q.front().second;
            q.pop();

            for(int delrow = -1;delrow<=1;delrow++){
                for(int delcol = -1; delcol<=1; delcol++){
                    
                    int Nrow = i + delrow;
                    int Ncol = j + delcol;
                    
                    if(Nrow>=0 && Nrow<n && Ncol>=0 && Ncol<m && !vis[Nrow][Ncol] &&
                    grid[Nrow][Ncol]=='1'){
                        vis[Nrow][Ncol] = 1;
                        q.push({Nrow,Ncol});
                    }
                    
                }
            }

        }

    }
    
    int numIslands(vector<vector<char>>& grid) {
         int n = grid.size(), m = grid[0].size();
         int res = 0;

        vector<vector<int>> vis(n, vector<int> (m,0));
    
        for(int row=0;row<n;row++){
            for(int col=0;col<m;col++){
                if(vis[row][col]==0 && grid[row][col] == '1'){
                    bfs(row,col,vis,grid);
                    res++;
                    // cout << row << " "<<col << endl;
                }
            }
        }
    
        // for(auto x:vis){
        //     for(auto y:x){
        //         cout << y << " ";
        //     }
        //     cout << endl;
        // }
    
        return res;
    }
