// BFS Traversal Technique
    // Signifies Level Order Traversal

/*
    It counts the levels according to Starting Node - (0)
    If starting Node is 0 then 1 and 2 connected nodes are at Level 1

    -- Levels in Breadth First Algorithm Depends upon the Starting Node


    - Use Queue Data Structure
    - Use visited Array to mark visited arrays to avoid duplications

    Adjacency List -
        0 = {}
        1 = {2,6}
        2 =  {1,3,4}
        3 = {2}
        4 = {5,2}
        5 = {4,8}
        6 = {1,7,9}
        7 = {6,8}
        8 = {5,7}
        9 = {6}

    Code -
        // Check whether it is 0 based indexing graph

        queue<int> q;
        vector<int> vis(n+1,0);
        q.push(adj[0]);
        vis[0] = 1;

        vector<int> bfs;

        while(!q.empty()){
            int node = q.front();
            q.pop();
            bfs.push_back(node);

            for(auto it : adj[node]){
                if(vis[it] != 1){
                    vis[it] = 1;
                    q.push(it);
                }
            }
        }

        return bfs;

        $Time COmplexity: O(N) .. queue itself run for all nodes + O(2E) -- internal node will run for total degrees
        
        $Space Complexity: O(3N)

*/
