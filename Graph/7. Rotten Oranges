class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int fresh = 0, afterfresh = 0;
        int n = grid.size(), m = grid[0].size();

        // To store {{i,j}, current time it was assigned}
       queue<pair<pair<int,int>, int>> q;
       vector<vector<int>> vis (n,vector<int>(m,0));


        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){

                if(grid[i][j] == 2){
                    q.push({{i,j}, 0});
                    vis[i][j] = 2;
                }
                if(grid[i][j] == 1) fresh++;
            }
        }

        int dRow[] = {-1,0,1,0};
        int dCol[] = {0,1,0,-1};
        int res = 0;

        while(!q.empty()){
            int r = q.front().first.first;
            int c = q.front().first.second;
            int t = q.front().second;
            q.pop();

            res = max(res,t);

            for(int i=0;i<4;i++){

                int nRow = r + dRow[i];
                int nCol = c + dCol[i];

                if(nRow>=0 && nRow<n && nCol>=0 && nCol<m && vis[nRow][nCol]==0 && grid[nRow][nCol]==1){
                    q.push({{nRow,nCol}, t + 1});
                    vis[nRow][nCol] = 2;
                    afterfresh++;
                }
            }
        }

        if(fresh!=afterfresh)
            return -1;

        return res;



    }
};
