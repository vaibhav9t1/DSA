/*         0/1 Matrix OR Shortest Source to Destination Path         */

// Same Concept is used in both the cases

/*
     int bfs(int n, int m , vector<vector<int>>& mat, int x, int y){
        
        if(mat[0][0] == 0) return -1;
        
        queue<pair<pair<int,int>,int>> q;
        q.push({{0,0}, 0});
        vector<vector<int>> vis(n, vector<int> (m,0));
        vis[0][0] = 1;
        int res = INT_MAX;
        
        int delrow[] = {-1,0,1,0};
        int delcol[] = {0,1,0,-1};
        
        
        while(!q.empty()){
            int r = q.front().first.first;
            int c = q.front().first.second;
            int step = q.front().second;
            q.pop();
            
            if(r==x && c==y){
                res = min(step,res);
                continue;
            }
            
            for(int i=0;i<4;i++){
                int nrow = r + delrow[i];
                int ncol = c + delcol[i];
                
                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && vis[nrow][ncol]==0 && mat[nrow][ncol]==1){
                    q.push({{nrow,ncol}, step + 1});
                    vis[nrow][ncol] = 1;
                }
                
            }
            
        }
        
        return res==INT_MAX ? -1 : res;
        
    }
  
    int shortestDistance(int N, int M, vector<vector<int>> A, int X, int Y) {
        
        return bfs(N,M,A,X,Y);
    }
*/
