class Solution {
public:

    int solve(vector<int> &card,int& start, int& end, int k,vector<vector<int>>& dp){

        if(k==0 || start>end) return 0;

        if(dp[start][end] != -1) return dp[start][end];

        int left = card[start++] + solve(card,start,end,k-1,dp);
        int right = card[end--] + solve(card,start,end,k-1,dp);

        return dp[start][end] = max(left, right);

    }

    int maxScore(vector<int>& cards, int k) {
        // vector<vector<int>> dp(cardPoints.size(), vector<int> (cardPoints.size(),-1));
        // int start = 0, end = cardPoints.size()-1;
        //  return solve(cardPoints,start,end,k,dp);

        // there are three conditions to find the answer 
        // 1. The answer is either sum of first K elements or 
        // 2. Last k elements,
        // Now reduce the one element from Left side and Last element of the array
        // Do this until you get maximum answer

        //  [1,2,3,4,5,6,1]      k=3
                      answer is 5+6+1 last three elements

        int sum1=0,sum2=0;

        for(int i=0;i<k;i++){
            sum1 += cards[i];
        } 

        for(int i=cards.size()-k;i<cards.size();i++){
            sum2 += cards[i];
        }

        int maxi = max(sum1,sum2);
        cout << sum2 << endl;

        if(cards.size() == k) return maxi;


        for(int i=0;i<k;i++){
            sum2 -= cards[cards.size()-k+i];
            sum2 += cards[i];
            maxi = max(maxi, sum2);
            cout << sum2 <<" ";
        }

         return maxi;

       

    }
};
