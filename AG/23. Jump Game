class Solution {
public:

    int dp[100000];
    bool solve(int ind, vector<int>&nums){

        if(ind == nums.size()-1) return true;
        if(ind >= nums.size()) return false;

        if(nums[ind] == 0) return false;

        if(dp[ind] != -1) return dp[ind];

        bool ans = 0;
        for(int i=1;i<=nums[ind];i++){
            ans = ans || solve(ind+i,nums);
            if(ans == true) return dp[ind] = true;
        }

        return dp[ind] = ans;
    }

    bool canJump(vector<int>& nums) {
        // memset(dp,-1,sizeof(dp));
        // return solve(0,nums);

        // This is using Finding the reachable distance at each step

        int reachable = 0;

        for(int i=0;i<nums.size();i++){
            if(reachable < i) return false;
            reachable = max(i+nums[i],reachable);
        }
        cout << reachable << endl;
        return reachable>=nums.size()-1 ? true : false;

    }
};
